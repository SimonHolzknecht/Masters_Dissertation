#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class BsplBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\u200c\u200c#|(//).*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class BsplParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\u200c\u200c#|(//).*?$',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=BsplBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _document_(self):  # noqa

        def block0():
            self._protocol_()
            self._cut()
        self._positive_closure(block0)
        self._check_eof()

    @tatsumasu()
    def _protocol_(self):  # noqa
        self._constant('protocol')
        self.name_last_node('type')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('protocol')
                with self._option():
                    self._void()
                self._error(
                    'expecting one of: '
                    "'protocol'"
                )
        self._spacename_()
        self.name_last_node('name')
        self._token('{')
        self._cut()
        self._token('roles')
        self._roles_()
        self.name_last_node('roles')
        self._token('parameters')
        self._params_()
        self.name_last_node('parameters')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('private')
                        self._params_()
                        self.name_last_node('private')
                with self._option():
                    self._void()
                self._error(
                    'expecting one of: '
                    "'private'"
                )
        self._references_()
        self.name_last_node('references')
        self._token('}')
        self._define(
            ['name', 'parameters', 'private', 'references', 'roles', 'type'],
            []
        )

    @tatsumasu()
    def _roles_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._role_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _role_(self):  # noqa
        self._word_()
        self.name_last_node('name')
        self._define(
            ['name'],
            []
        )

    @tatsumasu()
    def _params_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._param_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _param_(self):  # noqa
        with self._optional():
            self._adornment_()
            self.name_last_node('adornment')
        self._word_()
        self.name_last_node('name')
        with self._optional():
            self._token('key')
            self.name_last_node('key')
        self._define(
            ['adornment', 'key', 'name'],
            []
        )

    @tatsumasu()
    def _adornment_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('out')
            with self._option():
                self._token('in')
            with self._option():
                self._token('nil')
            with self._option():
                self._token('any')
            with self._option():
                self._token('opt')
            self._error(
                'expecting one of: '
                "'out' 'in' 'nil' 'any' 'opt'"
            )

    @tatsumasu()
    def _references_(self):  # noqa

        def block0():
            with self._choice():
                with self._option():
                    self._message_()
                with self._option():
                    self._ref_()
                self._error(
                    'expecting one of: '
                    '<word> <message> <spacename> <ref>'
                )
        self._closure(block0)

    @tatsumasu()
    def _ref_(self):  # noqa
        self._constant('protocol')
        self.name_last_node('type')
        self._spacename_()
        self.name_last_node('name')
        self._token('(')
        self._cut()
        with self._optional():
            self._roles_()
            self.name_last_node('roles')
            self._token('|')
        self._params_()
        self.name_last_node('params')
        self._token(')')
        self._define(
            ['name', 'params', 'roles', 'type'],
            []
        )

    @tatsumasu()
    def _message_(self):  # noqa
        self._constant('message')
        self.name_last_node('type')
        self._word_()
        self.name_last_node('sender')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('->')
                with self._option():
                    self._token('→')
                with self._option():
                    self._token('↦')
                self._error(
                    'expecting one of: '
                    "'->' '→' '↦'"
                )
        self._cut()
        self._word_()
        self.name_last_node('recipient')
        with self._optional():
            self._token(':')
        self._word_()
        self.name_last_node('name')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('[')
                    self._params_()
                    self.name_last_node('parameters')
                    self._token(']')
                with self._option():
                    self._void()
                self._error(
                    'expecting one of: '
                    "'['"
                )
        self._define(
            ['name', 'parameters', 'recipient', 'sender', 'type'],
            []
        )

    @tatsumasu()
    def _word_(self):  # noqa
        self._pattern('[\\w@-]+')

    @tatsumasu()
    def _spacename_(self):  # noqa
        self._pattern('[ \\w@-]+')


class BsplSemantics(object):
    def document(self, ast):  # noqa
        return ast

    def protocol(self, ast):  # noqa
        return ast

    def roles(self, ast):  # noqa
        return ast

    def role(self, ast):  # noqa
        return ast

    def params(self, ast):  # noqa
        return ast

    def param(self, ast):  # noqa
        return ast

    def adornment(self, ast):  # noqa
        return ast

    def references(self, ast):  # noqa
        return ast

    def ref(self, ast):  # noqa
        return ast

    def message(self, ast):  # noqa
        return ast

    def word(self, ast):  # noqa
        return ast

    def spacename(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'document'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = BsplParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, BsplParser, name='Bspl')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
